{"version":3,"sources":["ApolloClient.js","queries.js","components/SleepDataComponent.js","components/SleepWalkingComponent.js","App.js","reportWebVitals.js","index.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","connectToDevTools","credentials","headers","Cookies","get","GET_SLEEP_DATA","gql","_templateObject","_taggedTemplateLiteral","GET_SLEEPWALKING_EVENTS","_templateObject2","SleepDataComponent","loading","error","data","useQuery","React","createElement","console","allSleepData","map","_ref","id","startTime","endTime","sleepScore","key","SleepwalkingComponent","refetch","useEffect","intervalId","setInterval","clearInterval","chartData","allSleepwalkingEvents","length","intensity","duration","Date","name","concat","Intensity","Duration","BarChart","width","height","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Bar","fill","App","ApolloProvider","className","SleepWalkingComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"uSAwBeA,I,IAAAA,EArBA,IAAIC,IAAa,CAK5BC,IAAK,4BAELC,MAAO,IAAIC,IAMXC,mBAAmB,EAEnBC,YAAa,cAEbC,QAAS,CACP,cAAeC,IAAQC,IAAI,gB,2BClB1B,MAAMC,EAAiBC,YAAGC,MAAAC,YAAA,8HAUpBC,EAA0BH,YAAGI,MAAAF,YAAA,+ICa3BG,MArBf,WACE,MAAM,QAAEC,EAAO,MAAEC,EAAK,KAAEC,GAASC,YAASV,GAE1C,OAAIO,EAAgBI,IAAAC,cAAA,SAAG,cACnBJ,GACFK,QAAQL,MAAM,iBAAkBA,GACzBG,IAAAC,cAAA,SAAG,aAIVD,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,cACHH,EAAKK,aAAaC,IAAIC,IAAA,IAAC,GAAEC,EAAE,UAAEC,EAAS,QAAEC,EAAO,WAAEC,GAAYJ,EAAA,OAC5DL,IAAAC,cAAA,OAAKS,IAAKJ,GACRN,IAAAC,cAAA,SAAG,cAAYM,EAAU,OAAKC,EAAQ,gBAAcC,Q,qDCyC/CE,MAtDf,WACE,MAAM,QAAEf,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEc,GAAYb,YAASN,GAYnD,GATAoB,oBAAU,KACR,MAAMC,EAAaC,YAAY,KAC7BH,KACC,KAGH,MAAO,IAAMI,cAAcF,IAC1B,CAACF,IAEAhB,EAAS,OAAOI,IAAAC,cAAA,SAAG,cACvB,GAAIJ,EAEF,OADAK,QAAQL,MAAM,iBAAkBA,GACzBG,IAAAC,cAAA,SAAG,YAIZ,MASMgB,GAHSnB,EAAKoB,sBAAsBC,OAAS,EAAIrB,EAAKoB,sBANzC,CACjB,CAAEZ,GAAI,IAAKC,UAAW,uBAAwBC,QAAS,uBAAwBY,UAAW,GAC1F,CAAEd,GAAI,IAAKC,UAAW,uBAAwBC,QAAS,uBAAwBY,UAAW,KAOnEhB,IAAIC,IAA4C,IAA3C,GAAEC,EAAE,UAAEC,EAAS,QAAEC,EAAO,UAAEY,GAAWf,EAEjE,MAAMgB,GAAY,IAAIC,KAAKd,GAAW,IAAIc,KAAKf,IAAc,IAAO,GACpE,MAAO,CACLgB,KAAK,SAADC,OAAWlB,GACfmB,UAAWL,EACXM,SAAUL,KAId,OACErB,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAAC0B,IAAQ,CAACC,MAAO,IAAKC,OAAQ,IAAK/B,KAAMmB,GACvCjB,IAAAC,cAAC6B,IAAa,CAACC,gBAAgB,QAC/B/B,IAAAC,cAAC+B,IAAK,CAACC,QAAQ,SACfjC,IAAAC,cAACiC,IAAK,MACNlC,IAAAC,cAACkC,IAAO,MACRnC,IAAAC,cAACmC,IAAG,CAACH,QAAQ,YAAYI,KAAK,YAC9BrC,IAAAC,cAACmC,IAAG,CAACH,QAAQ,WAAWI,KAAK,eCnCtBC,MAZf,WACE,OACEtC,IAAAC,cAACsC,IAAc,CAAC5D,OAAQA,GACtBqB,IAAAC,cAAA,OAAKuC,UAAU,OACbxC,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAACN,EAAkB,MACnBK,IAAAC,cAACwC,EAAqB,SCDfC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,KAAKxC,IAAkD,IAAjD,OAAEyC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAS7C,EACpEyC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvD,IAAAC,cAACD,IAAMwD,WAAU,KACfxD,IAAAC,cAACqC,EAAG,QAORI,M","file":"static/js/main.5c98d299.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst client = new ApolloClient({\r\n    // -------------------\r\n    // # Required Fields #\r\n    // -------------------\r\n    // URI - GraphQL Endpoint\r\n    uri: 'https://rk-8.com/graphql/',\r\n    // Cache\r\n    cache: new InMemoryCache(),\r\n  \r\n    // -------------------\r\n    // # Optional Fields #\r\n    // -------------------\r\n    // DevBrowserConsole\r\n    connectToDevTools: true,\r\n    // Else\r\n    credentials: 'same-origin',\r\n    \r\n    headers: {\r\n      'X-CSRFToken': Cookies.get('csrftoken')\r\n    }\r\n  });\r\nexport default client;\r\n","// src/queries.js\r\nimport { gql } from '@apollo/client';\r\n\r\nexport const GET_SLEEP_DATA = gql`\r\n  query GetSleepData {\r\n    allSleepData {\r\n      id\r\n      startTime\r\n      endTime\r\n      sleepScore\r\n    }\r\n  }\r\n`;\r\nexport const GET_SLEEPWALKING_EVENTS = gql`\r\n  query GetSleepwalkingEvents {\r\n    allSleepwalkingEvents {\r\n      id\r\n      startTime\r\n      endTime\r\n      intensity\r\n    }\r\n  }\r\n`;\r\n","// src/components/SleepDataComponent.js\r\nimport React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_SLEEP_DATA } from '../queries';\r\n\r\nfunction SleepDataComponent() {\r\n  const { loading, error, data } = useQuery(GET_SLEEP_DATA);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) {\r\n    console.error(\"GraphQL Error:\", error);\r\n    return <p>Error :(</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Sleep Data</h1>\r\n      {data.allSleepData.map(({ id, startTime, endTime, sleepScore }) => (\r\n        <div key={id}>\r\n          <p>Sleep from {startTime} to {endTime} with score: {sleepScore}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SleepDataComponent;\r\n","// src/components/SleepWalkingComponent.js\r\nimport React , { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_SLEEPWALKING_EVENTS } from '../queries';\r\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid } from 'recharts';\r\n\r\nfunction SleepwalkingComponent() {\r\n  const { loading, error, data, refetch } = useQuery(GET_SLEEPWALKING_EVENTS);\r\n\r\n  // Refetch the data every 5 seconds\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      refetch();\r\n    }, 5000);\r\n\r\n    // Clean up the interval on unmount\r\n    return () => clearInterval(intervalId);\r\n  }, [refetch]);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) {\r\n    console.error(\"GraphQL Error:\", error);\r\n    return <p>Error :(</p>;\r\n  }\r\n\r\n  // Sample data for when the database is empty\r\n  const sampleData = [\r\n    { id: '1', startTime: '2022-01-01T00:00:00Z', endTime: '2022-01-01T01:00:00Z', intensity: 5 },\r\n    { id: '2', startTime: '2022-01-02T00:00:00Z', endTime: '2022-01-02T01:30:00Z', intensity: 7 },\r\n    // Add more sample events as needed\r\n  ];\r\n\r\n  const events = data.allSleepwalkingEvents.length > 0 ? data.allSleepwalkingEvents : sampleData;\r\n\r\n  // Prepare the data for the bar chart\r\n  const chartData = events.map(({ id, startTime, endTime, intensity }) => {\r\n    // Calculate the duration of the event in minutes\r\n    const duration = (new Date(endTime) - new Date(startTime)) / 1000 / 60;\r\n    return {\r\n      name: `Event ${id}`,\r\n      Intensity: intensity,\r\n      Duration: duration,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h1>Sleepwalking Events</h1>\r\n      <BarChart width={500} height={300} data={chartData}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Bar dataKey=\"Intensity\" fill=\"#8884d8\" />\r\n        <Bar dataKey=\"Duration\" fill=\"#82ca9d\" />\r\n      </BarChart>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SleepwalkingComponent;","// App.js\nimport React from 'react';\nimport { ApolloProvider } from '@apollo/client';  // Corrected import\nimport client from './ApolloClient';\nimport SleepDataComponent from './components/SleepDataComponent';\nimport SleepWalkingComponent from './components/SleepWalkingComponent';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <h1>Sleep Tracker</h1>\n        <SleepDataComponent />\n        <SleepWalkingComponent />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}