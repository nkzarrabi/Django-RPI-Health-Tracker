{"version":3,"sources":["ApolloClient.js","queries.js","components/SleepDataComponent.js","components/SleepWalkingComponent.js","App.js","reportWebVitals.js","index.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","connectToDevTools","credentials","headers","X-CSRFToken","Cookies","get","GET_SLEEP_DATA","gql","_templateObject","_taggedTemplateLiteral","GET_SLEEPWALKING_EVENTS","_templateObject2","SleepDataComponent","loading","error","data","useQuery","React","createElement","console","allSleepData","map","_ref","id","startTime","endTime","sleepScore","key","SleepwalkingComponent","allSleepwalkingEvents","intensity","App","ApolloProvider","className","SleepWalkingComponent","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+OAwBeA,UArBA,IAAIC,IAAa,CAK5BC,IAAK,iCAELC,MAAO,IAAIC,IAMXC,mBAAmB,EAEnBC,YAAa,cAEbC,QAAS,CACPC,cAAeC,IAAQC,IAAI,wCClB1B,MAAMC,EAAiBC,YAAGC,MAAAC,YAAA,8HAUpBC,EAA0BH,YAAGI,MAAAF,YAAA,+ICa3BG,MArBf,WACE,MAAMC,QAAEA,EAAOC,MAAEA,EAAKC,KAAEA,GAASC,YAASV,GAE1C,OAAIO,EAAgBI,IAAAC,cAAA,SAAG,cACnBJ,GACFK,QAAQL,MAAM,iBAAkBA,GACzBG,IAAAC,cAAA,SAAG,aAIVD,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,cACHH,EAAKK,aAAaC,IAAIC,IAAA,IAACC,GAAEA,EAAEC,UAAEA,EAASC,QAAEA,EAAOC,WAAEA,GAAYJ,EAAA,OAC5DL,IAAAC,cAAA,OAAKS,IAAKJ,GACRN,IAAAC,cAAA,SAAG,cAAYM,EAAU,OAAKC,EAAQ,gBAAcC,QCO/CE,MArBf,WACE,MAAMf,QAAEA,EAAOC,MAAEA,EAAKC,KAAEA,GAASC,YAASN,GAE1C,OAAIG,EAAgBI,IAAAC,cAAA,SAAG,cACnBJ,GACFK,QAAQL,MAAM,iBAAkBA,GACzBG,IAAAC,cAAA,SAAG,aAIVD,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,uBACHH,EAAKc,sBAAsBR,IAAIC,IAAA,IAACC,GAAEA,EAAEC,UAAEA,EAASC,QAAEA,EAAOK,UAAEA,GAAWR,EAAA,OACpEL,IAAAC,cAAA,OAAKS,IAAKJ,GACRN,IAAAC,cAAA,SAAG,qBAAmBM,EAAU,OAAKC,EAAQ,iBAAeK,QCDvDC,MAZf,WACE,OACEd,IAAAC,cAACc,IAAc,CAACrC,OAAQA,GACtBsB,IAAAC,cAAA,OAAKe,UAAU,OACbhB,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAACN,EAAkB,MACnBK,IAAAC,cAACgB,EAAqB,SCAfC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKlB,IAAiD,IAAhDoB,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASxB,EACpEoB,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlC,IAAAC,cAACD,IAAMmC,WAAU,KACfnC,IAAAC,cAACa,EAAG,QAORI","file":"static/js/main.9720ace5.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst client = new ApolloClient({\r\n    // -------------------\r\n    // # Required Fields #\r\n    // -------------------\r\n    // URI - GraphQL Endpoint\r\n    uri: 'http://localhost:8000/graphql/',\r\n    // Cache\r\n    cache: new InMemoryCache(),\r\n  \r\n    // -------------------\r\n    // # Optional Fields #\r\n    // -------------------\r\n    // DevBrowserConsole\r\n    connectToDevTools: true,\r\n    // Else\r\n    credentials: 'same-origin',\r\n    \r\n    headers: {\r\n      'X-CSRFToken': Cookies.get('csrftoken')\r\n    }\r\n  });\r\nexport default client;\r\n","// src/queries.js\r\nimport { gql } from '@apollo/client';\r\n\r\nexport const GET_SLEEP_DATA = gql`\r\n  query GetSleepData {\r\n    allSleepData {\r\n      id\r\n      startTime\r\n      endTime\r\n      sleepScore\r\n    }\r\n  }\r\n`;\r\nexport const GET_SLEEPWALKING_EVENTS = gql`\r\n  query GetSleepwalkingEvents {\r\n    allSleepwalkingEvents {\r\n      id\r\n      startTime\r\n      endTime\r\n      intensity\r\n    }\r\n  }\r\n`;\r\n","// src/components/SleepDataComponent.js\r\nimport React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_SLEEP_DATA } from '../queries';\r\n\r\nfunction SleepDataComponent() {\r\n  const { loading, error, data } = useQuery(GET_SLEEP_DATA);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) {\r\n    console.error(\"GraphQL Error:\", error);\r\n    return <p>Error :(</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Sleep Data</h1>\r\n      {data.allSleepData.map(({ id, startTime, endTime, sleepScore }) => (\r\n        <div key={id}>\r\n          <p>Sleep from {startTime} to {endTime} with score: {sleepScore}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SleepDataComponent;\r\n","// src/components/SleepWalkingComponent.js\r\nimport React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_SLEEPWALKING_EVENTS } from '../queries';\r\n\r\nfunction SleepwalkingComponent() {\r\n  const { loading, error, data } = useQuery(GET_SLEEPWALKING_EVENTS);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) {\r\n    console.error(\"GraphQL Error:\", error);\r\n    return <p>Error :(</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Sleepwalking Events</h1>\r\n      {data.allSleepwalkingEvents.map(({ id, startTime, endTime, intensity }) => (\r\n        <div key={id}>\r\n          <p>Sleepwalking from {startTime} to {endTime} - Intensity: {intensity}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SleepwalkingComponent;\r\n\r\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/client';  // Corrected import\nimport client from './ApolloClient';\nimport SleepDataComponent from './components/SleepDataComponent';\nimport SleepWalkingComponent from './components/SleepWalkingComponent';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <h1>Sleep Tracker</h1>\n        <SleepDataComponent />\n        <SleepWalkingComponent />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}